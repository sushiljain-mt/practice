const { fillWithP, fillWithZ } = require('../util');

const firstDiag = {
    type: 'diagonal',
    rules: {
        stroke: {
            fill: 'P',
            width: 'N',
            slant: [2, 1],
            slantDir: 'top',
        },
        rest: {
            fill: 'Z',
        },
    },
};

// const secondDiag = {
//     type: 'diagonal',
//     rules: {
//         stroke: {
//             fill: 'P',
//             width: 'N',
//             slant: [2, 1],
//             slantDir: 'bottom-right',
//         },
//         rest: {
//             fill: 'Z',
//         },
//     },
// };


module.exports = {
    type: 'overlap',
    children: [
        {
            type: 'row',
            height: '5*N',
            children: [
                Object.assign(
                    firstDiag,
                    { after: [
                        {
                            type: 'splice',
                            column: -1,
                        }
                    ] }
                ),
                Object.assign(
                    firstDiag,
                    { after: [
                        {
                            type: 'mirror',
                            mirrorBy: 'column',
                        },
                        {
                            type: 'splice',
                            column: 1,
                        }
                    ] }
                ),
            ],
        }
    ],
    height: '5*N',
    children: [
        fillWithP({ width: 'N' }),
        {
            type: 'column',
            width: '2*N',
            children: [
                fillWithP({ height: 'N' }),
                fillWithZ({ height: '3*N' }),
                fillWithP({ height: 'N' }),
            ],
        }
    ],
};

/**
.......###
......###.
......###.
.....###..
.....###..
....###...
....###...
...###....
...###....
..###.....
..###.....
.###......
.###......
###.......
###.......
*/

/**
.........####
.........####
........####.
........####.
.......####..
.......####..
......####...
......####...
.....####....
.....####....
....####.....
....####.....
...####......
...####......
..####.......
..####.......
.####........
.####........
####.........
####.........
*/


/**
.........########.........
.........########.........
........####..####........
........####..####........
.......####....####.......
.......####....####.......
......####......####......
......####......####......
.....####........####.....
.....####........####.....
....####..........####....
....####..........####....
...####............####...
...####............####...
..####..............####..
..####..............####..
.####................####.
.####................####.
####..................####
####..................####
*/



/**
.........########.........
.........########.........
........####..####........
........####..####........
.......####....####.......
.......####....####.......
......####......####......
......####......####......
.....####........####.....
.....####........####.....
....####..........####....
....####..........####....
...####$$$$$$$$$$$$####...
...####$$$$$$$$$$$$####...
..####$$$$$$$$$$$$$$####..
..####$$$$$$$$$$$$$$####..
.####................####.
.####................####.
####..................####
####..................####
*/

/**
.........######.........
.........######.........
........########........
........########........
.......####..####.......
.......####..####.......
......####....####......
......####....####......
.....####......####.....
.....####......####.....
....####........####....
....####........####....
...####$$$$$$$$$$####...
...####$$$$$$$$$$####...
..####$$$$$$$$$$$$####..
..####$$$$$$$$$$$$####..
.####..............####.
.####..............####.
####................####
####................####
*/
